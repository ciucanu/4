#!/bin/bash

set -e 

# Log levels
INFO="[INFO]"
ERROR="[ERROR]"
DEBUG="[DEBUG]"

# Function to log messages
log_message() {
    local level="$1"
    shift
    local message="$@"
    echo "$(date '+%Y-%m-%d %H:%M:%S') $level $message"
}

# Function to get password using eva.sh script
get_password() {
    EVA_PATH="$1"
    password=$(~/.eva/eva.sh "$EVA_PATH" -s)
    echo "$password"
}

# Function to execute SQL files
execute_sql() {
    SQL_FILE="$1"
    PG_CONNECTION="$2"
    PASSWORD="$3"
    
    log_message "$INFO" "Executing SQL file: $SQL_FILE on connection: $PG_CONNECTION"
    
    # Use PGPASSWORD environment variable to pass password securely
    PGPASSWORD="$PASSWORD" psql "$PG_CONNECTION" -c "\\i $SQL_FILE"
    
    if [ $? -ne 0 ]; then
        log_message "$ERROR" "Failed to execute SQL file: $SQL_FILE"
    else
        log_message "$INFO" "Successfully executed SQL file: $SQL_FILE"
    fi
}

# Function to download a file
download_file() {
    URL="$1"
    OUTPUT="$2"
    
    log_message "$INFO" "Downloading file from URL: $URL to $OUTPUT"
    
    curl --silent --fail -o "$OUTPUT" "$URL"
    
    # Check if the download was successful
    if [ $? -ne 0 ]; then
        log_message "$ERROR" "Failed to download $URL"
        exit 1
    else
        log_message "$INFO" "Successfully downloaded $URL"
    fi
}

# Function to process a single SQL file
process_sql_file() {
    SQL_FILE="$1"
    
    log_message "$INFO" "Processing SQL file: $SQL_FILE"
    
    if ! grep -q "^$(basename "$SQL_FILE") " config.txt; then
        log_message "$ERROR" "Specified SQL file $(basename "$SQL_FILE") not found in config.txt"
        return 1  # Change exit to return to continue processing other files
    fi

    LINE=$(awk -v file="$(basename "$SQL_FILE")" '$1 == file' config.txt)
    IFS=' ' read -r -a array <<< "$LINE"
    PG_CONNECTION="${array[1]}"
    EVA_PATH="${array[2]}"
    PASSWORD=$(get_password "$EVA_PATH")
    execute_sql "$SQL_FILE" "$PG_CONNECTION" "$PASSWORD"
}

# Function to process a ZIP file
process_zip_file() {
    ZIP_FILE="$1"
    
    log_message "$INFO" "Processing ZIP file: $ZIP_FILE"
    
    # Create a unique temporary directory
    TEMP_DIR=$(mktemp -d)
    
    # Ensure cleanup of the temporary directory on exit
    trap "rm -rf $TEMP_DIR" EXIT

    unzip "$ZIP_FILE" -d "$TEMP_DIR"

    for SQL_FILE in "$TEMP_DIR"/*.sql; do
        if ! grep -q "^$(basename "$SQL_FILE") " config.txt; then
            log_message "$ERROR" "SQL file $(basename "$SQL_FILE") not found in config.txt, skipping..."
            continue
        fi

        LINE=$(awk -v file="$(basename "$SQL_FILE")" '$1 == file' config.txt)
        IFS=' ' read -r -a array <<< "$LINE"
        PG_CONNECTION="${array[1]}"
        EVA_PATH="${array[2]}"
        PASSWORD=$(get_password "$EVA_PATH")
        execute_sql "$SQL_FILE" "$PG_CONNECTION" "$PASSWORD"
    done
}

# Main function
main() {
    if [ "$#" -ne 1 ]; then
        log_message "$ERROR" "Usage: $0 <file_or_url>"
        exit 1
    fi

    INPUT="$1"

    if [[ "$INPUT" == http* ]]; then
        # URL case
        if [[ "$INPUT" == *.sql ]]; then
            # URL pointing to a SQL file
            SQL_FILE=$(basename "$INPUT")
            download_file "$INPUT" "$SQL_FILE"
            process_sql_file "$SQL_FILE"
            rm -f "$SQL_FILE"
        elif [[ "$INPUT" == *.zip ]]; then
            # URL pointing to a ZIP file
            ZIP_FILE=$(basename "$INPUT")
            download_file "$INPUT" "$ZIP_FILE"
            process_zip_file "$ZIP_FILE"
            rm -f "$ZIP_FILE"
        else
            log_message "$ERROR" "Invalid URL: $INPUT. Only .sql and .zip files are supported."
            exit 1
        fi
    else
        # Local file case
        if [[ -f "$INPUT" ]]; then
            if [[ "$INPUT" == *.sql ]]; then
                # Local SQL file
                process_sql_file "$INPUT"
            elif [[ "$INPUT" == *.zip ]]; then
                # Local ZIP file
                process_zip_file "$INPUT"
            else
                log_message "$ERROR" "Invalid file type: $INPUT. Only .sql and .zip files are supported."
                exit 1
            fi
        else
            log_message "$ERROR" "File not found: $INPUT"
            exit 1
        fi
    fi
}

# Run the main function with passed arguments
main "$@"
